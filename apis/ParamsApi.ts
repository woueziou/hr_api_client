/* tslint:disable */
/* eslint-disable */
/**
 * HR API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CountryResponse,
  OrganizationResponse,
  PermissionTypeResponse,
  PostionResponse,
  StationResponse,
} from '../models';
import {
    CountryResponseFromJSON,
    CountryResponseToJSON,
    OrganizationResponseFromJSON,
    OrganizationResponseToJSON,
    PermissionTypeResponseFromJSON,
    PermissionTypeResponseToJSON,
    PostionResponseFromJSON,
    PostionResponseToJSON,
    StationResponseFromJSON,
    StationResponseToJSON,
} from '../models';

/**
 * 
 */
export class ParamsApi extends runtime.BaseAPI {

    /**
     */
    async apiParamsGetCountriesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Params/GetCountries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryResponseFromJSON));
    }

    /**
     */
    async apiParamsGetCountriesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryResponse>> {
        const response = await this.apiParamsGetCountriesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiParamsGetOrganizationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganizationResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Params/GetOrganizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationResponseFromJSON));
    }

    /**
     */
    async apiParamsGetOrganizationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganizationResponse>> {
        const response = await this.apiParamsGetOrganizationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiParamsGetPermissionTypeListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PermissionTypeResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Params/GetPermissionTypeList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionTypeResponseFromJSON));
    }

    /**
     */
    async apiParamsGetPermissionTypeListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PermissionTypeResponse>> {
        const response = await this.apiParamsGetPermissionTypeListGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiParamsGetPositionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PostionResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Params/GetPositions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostionResponseFromJSON));
    }

    /**
     */
    async apiParamsGetPositionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PostionResponse>> {
        const response = await this.apiParamsGetPositionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiParamsGetStationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StationResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Params/GetStations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StationResponseFromJSON));
    }

    /**
     */
    async apiParamsGetStationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StationResponse>> {
        const response = await this.apiParamsGetStationsGetRaw(initOverrides);
        return await response.value();
    }

}
