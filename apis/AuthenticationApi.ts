/* tslint:disable */
/* eslint-disable */
/**
 * HR API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginModel,
  RegisterModel,
  Tokens,
  UserResponse,
} from '../models';
import {
    LoginModelFromJSON,
    LoginModelToJSON,
    RegisterModelFromJSON,
    RegisterModelToJSON,
    TokensFromJSON,
    TokensToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models';

export interface ApiAuthenticationLoginUserPostRequest {
    loginModel?: LoginModel;
}

export interface ApiAuthenticationRegisterUserPostRequest {
    registerModel?: RegisterModel;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthenticationLoginUserPostRaw(requestParameters: ApiAuthenticationLoginUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tokens>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Authentication/LoginUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginModelToJSON(requestParameters.loginModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationLoginUserPost(requestParameters: ApiAuthenticationLoginUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tokens> {
        const response = await this.apiAuthenticationLoginUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationRegisterUserPostRaw(requestParameters: ApiAuthenticationRegisterUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Authentication/RegisterUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterModelToJSON(requestParameters.registerModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationRegisterUserPost(requestParameters: ApiAuthenticationRegisterUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.apiAuthenticationRegisterUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationWhoAmIGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Authentication/WhoAmI`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationWhoAmIGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.apiAuthenticationWhoAmIGetRaw(initOverrides);
        return await response.value();
    }

}
