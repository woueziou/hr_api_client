/* tslint:disable */
/* eslint-disable */
/**
 * HR API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateTicketRequest
 */
export interface CreateTicketRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateTicketRequest
     */
    ticketTypeId: number;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketRequest
     */
    benefitId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketRequest
     */
    carrierId?: number;
    /**
     * 
     * @type {Date}
     * @memberof CreateTicketRequest
     */
    dateDeparture: Date;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketRequest
     */
    originStation: number;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketRequest
     */
    destinationStation: number;
    /**
     * 
     * @type {Date}
     * @memberof CreateTicketRequest
     */
    dateDesired: Date;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketRequest
     */
    additionalComments?: string | null;
}

/**
 * Check if a given object implements the CreateTicketRequest interface.
 */
export function instanceOfCreateTicketRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ticketTypeId" in value;
    isInstance = isInstance && "dateDeparture" in value;
    isInstance = isInstance && "originStation" in value;
    isInstance = isInstance && "destinationStation" in value;
    isInstance = isInstance && "dateDesired" in value;

    return isInstance;
}

export function CreateTicketRequestFromJSON(json: any): CreateTicketRequest {
    return CreateTicketRequestFromJSONTyped(json, false);
}

export function CreateTicketRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateTicketRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ticketTypeId': json['ticketTypeId'],
        'benefitId': !exists(json, 'benefitId') ? undefined : json['benefitId'],
        'carrierId': !exists(json, 'carrierId') ? undefined : json['carrierId'],
        'dateDeparture': (new Date(json['dateDeparture'])),
        'originStation': json['originStation'],
        'destinationStation': json['destinationStation'],
        'dateDesired': (new Date(json['dateDesired'])),
        'additionalComments': !exists(json, 'additionalComments') ? undefined : json['additionalComments'],
    };
}

export function CreateTicketRequestToJSON(value?: CreateTicketRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ticketTypeId': value.ticketTypeId,
        'benefitId': value.benefitId,
        'carrierId': value.carrierId,
        'dateDeparture': (value.dateDeparture.toISOString()),
        'originStation': value.originStation,
        'destinationStation': value.destinationStation,
        'dateDesired': (value.dateDesired.toISOString()),
        'additionalComments': value.additionalComments,
    };
}

