/* tslint:disable */
/* eslint-disable */
/**
 * HR API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TicketResponse
 */
export interface TicketResponse {
    /**
     * 
     * @type {string}
     * @memberof TicketResponse
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TicketResponse
     */
    comment?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof TicketResponse
     */
    dateDeparture?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TicketResponse
     */
    dateDesired?: Date;
    /**
     * 
     * @type {number}
     * @memberof TicketResponse
     */
    carrierName?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketResponse
     */
    beneficiaryFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TicketResponse
     */
    beneficiaryLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TicketResponse
     */
    destinationStationName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TicketResponse
     */
    originStationName?: number;
    /**
     * 
     * @type {number}
     * @memberof TicketResponse
     */
    ticketTypeName?: number;
}

/**
 * Check if a given object implements the TicketResponse interface.
 */
export function instanceOfTicketResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TicketResponseFromJSON(json: any): TicketResponse {
    return TicketResponseFromJSONTyped(json, false);
}

export function TicketResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TicketResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'dateDeparture': !exists(json, 'dateDeparture') ? undefined : (new Date(json['dateDeparture'])),
        'dateDesired': !exists(json, 'dateDesired') ? undefined : (new Date(json['dateDesired'])),
        'carrierName': !exists(json, 'carrierName') ? undefined : json['carrierName'],
        'beneficiaryFirstName': !exists(json, 'beneficiaryFirstName') ? undefined : json['beneficiaryFirstName'],
        'beneficiaryLastName': !exists(json, 'beneficiaryLastName') ? undefined : json['beneficiaryLastName'],
        'destinationStationName': !exists(json, 'destinationStationName') ? undefined : json['destinationStationName'],
        'originStationName': !exists(json, 'originStationName') ? undefined : json['originStationName'],
        'ticketTypeName': !exists(json, 'ticketTypeName') ? undefined : json['ticketTypeName'],
    };
}

export function TicketResponseToJSON(value?: TicketResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'comment': value.comment,
        'dateDeparture': value.dateDeparture === undefined ? undefined : (value.dateDeparture.toISOString()),
        'dateDesired': value.dateDesired === undefined ? undefined : (value.dateDesired.toISOString()),
        'carrierName': value.carrierName,
        'beneficiaryFirstName': value.beneficiaryFirstName,
        'beneficiaryLastName': value.beneficiaryLastName,
        'destinationStationName': value.destinationStationName,
        'originStationName': value.originStationName,
        'ticketTypeName': value.ticketTypeName,
    };
}

