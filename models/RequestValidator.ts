/* tslint:disable */
/* eslint-disable */
/**
 * HR API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Request } from './Request';
import {
    RequestFromJSON,
    RequestFromJSONTyped,
    RequestToJSON,
} from './Request';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface RequestValidator
 */
export interface RequestValidator {
    /**
     * 
     * @type {string}
     * @memberof RequestValidator
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestValidator
     */
    validatorId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestValidator
     */
    requestId?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof RequestValidator
     */
    granted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof RequestValidator
     */
    dateAction?: Date;
    /**
     * 
     * @type {string}
     * @memberof RequestValidator
     */
    comment?: string | null;
    /**
     * 
     * @type {Request}
     * @memberof RequestValidator
     */
    request?: Request;
    /**
     * 
     * @type {User}
     * @memberof RequestValidator
     */
    validator?: User;
}

/**
 * Check if a given object implements the RequestValidator interface.
 */
export function instanceOfRequestValidator(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RequestValidatorFromJSON(json: any): RequestValidator {
    return RequestValidatorFromJSONTyped(json, false);
}

export function RequestValidatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestValidator {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'validatorId': !exists(json, 'validatorId') ? undefined : json['validatorId'],
        'requestId': !exists(json, 'requestId') ? undefined : json['requestId'],
        'granted': !exists(json, 'granted') ? undefined : json['granted'],
        'dateAction': !exists(json, 'dateAction') ? undefined : (new Date(json['dateAction'])),
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'request': !exists(json, 'request') ? undefined : RequestFromJSON(json['request']),
        'validator': !exists(json, 'validator') ? undefined : UserFromJSON(json['validator']),
    };
}

export function RequestValidatorToJSON(value?: RequestValidator | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'validatorId': value.validatorId,
        'requestId': value.requestId,
        'granted': value.granted,
        'dateAction': value.dateAction === undefined ? undefined : (value.dateAction.toISOString()),
        'comment': value.comment,
        'request': RequestToJSON(value.request),
        'validator': UserToJSON(value.validator),
    };
}

