/* tslint:disable */
/* eslint-disable */
/**
 * HR API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PermissionHistory } from './PermissionHistory';
import {
    PermissionHistoryFromJSON,
    PermissionHistoryFromJSONTyped,
    PermissionHistoryToJSON,
} from './PermissionHistory';
import type { PermissionType } from './PermissionType';
import {
    PermissionTypeFromJSON,
    PermissionTypeFromJSONTyped,
    PermissionTypeToJSON,
} from './PermissionType';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    id?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Permission
     */
    dateStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Permission
     */
    dateReturn?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Permission
     */
    isAllowed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    userId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Permission
     */
    permissionTypeId?: number;
    /**
     * 
     * @type {PermissionType}
     * @memberof Permission
     */
    permissionType?: PermissionType;
    /**
     * 
     * @type {User}
     * @memberof Permission
     */
    user?: User;
    /**
     * 
     * @type {Array<PermissionHistory>}
     * @memberof Permission
     */
    permissionHistories?: Array<PermissionHistory> | null;
}

/**
 * Check if a given object implements the Permission interface.
 */
export function instanceOfPermission(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PermissionFromJSON(json: any): Permission {
    return PermissionFromJSONTyped(json, false);
}

export function PermissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Permission {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'dateStart': !exists(json, 'dateStart') ? undefined : (new Date(json['dateStart'])),
        'dateReturn': !exists(json, 'dateReturn') ? undefined : (new Date(json['dateReturn'])),
        'isAllowed': !exists(json, 'isAllowed') ? undefined : json['isAllowed'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'permissionTypeId': !exists(json, 'permissionTypeId') ? undefined : json['permissionTypeId'],
        'permissionType': !exists(json, 'permissionType') ? undefined : PermissionTypeFromJSON(json['permissionType']),
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
        'permissionHistories': !exists(json, 'permissionHistories') ? undefined : (json['permissionHistories'] === null ? null : (json['permissionHistories'] as Array<any>).map(PermissionHistoryFromJSON)),
    };
}

export function PermissionToJSON(value?: Permission | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'dateStart': value.dateStart === undefined ? undefined : (value.dateStart.toISOString()),
        'dateReturn': value.dateReturn === undefined ? undefined : (value.dateReturn.toISOString()),
        'isAllowed': value.isAllowed,
        'userId': value.userId,
        'permissionTypeId': value.permissionTypeId,
        'permissionType': PermissionTypeToJSON(value.permissionType),
        'user': UserToJSON(value.user),
        'permissionHistories': value.permissionHistories === undefined ? undefined : (value.permissionHistories === null ? null : (value.permissionHistories as Array<any>).map(PermissionHistoryToJSON)),
    };
}

