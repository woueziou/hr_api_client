/**
 * HR API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  StationResponse,
  OrganizationResponse,
  CountryResponse,
  PermissionTypeResponse,
  PostionResponse,
} from './models';

/**
 * apiParamsGetCountriesGet - parameters interface
 */
export interface IApiParamsGetCountriesGetParams {
}

/**
 * apiParamsGetOrganizationsGet - parameters interface
 */
export interface IApiParamsGetOrganizationsGetParams {
}

/**
 * apiParamsGetPermissionTypeListGet - parameters interface
 */
export interface IApiParamsGetPermissionTypeListGetParams {
}

/**
 * apiParamsGetPositionsGet - parameters interface
 */
export interface IApiParamsGetPositionsGetParams {
}

/**
 * apiParamsGetStationsGet - parameters interface
 */
export interface IApiParamsGetStationsGetParams {
}

/**
 * ParamsApi - API class
 */
@autoinject()
export class ParamsApi extends Api {

  /**
   * Creates a new ParamsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   */
  async apiParamsGetCountriesGet(): Promise<Array<CountryResponse>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/api/Params/GetCountries`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'Bearer' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   */
  async apiParamsGetOrganizationsGet(): Promise<Array<OrganizationResponse>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/api/Params/GetOrganizations`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'Bearer' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   */
  async apiParamsGetPermissionTypeListGet(): Promise<Array<PermissionTypeResponse>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/api/Params/GetPermissionTypeList`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'Bearer' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   */
  async apiParamsGetPositionsGet(): Promise<Array<PostionResponse>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/api/Params/GetPositions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'Bearer' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   */
  async apiParamsGetStationsGet(): Promise<Array<StationResponse>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/api/Params/GetStations`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'Bearer' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

